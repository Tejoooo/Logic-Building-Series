# 1. Fibonacci Series
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

# 2. Tribonacci Series
def tribonacci(n):
    if n == 0: return 0
    if n == 1 or n == 2: return 1
    return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)

# 3. Tetranacci Series
def tetranacci(n):
    if n < 3: return 0
    if n == 3: return 1
    return tetranacci(n-1) + tetranacci(n-2) + tetranacci(n-3) + tetranacci(n-4)

# 4. Padovan Series
def padovan(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    return padovan(n-2) + padovan(n-3)

# 5. Look-and-Say Series
def look_and_say(n):
    s = "1"
    for _ in range(n - 1):
        i = 0
        temp = ""
        while i < len(s):
            count = 1
            while i + 1 < len(s) and s[i] == s[i+1]:
                i += 1
                count += 1
            temp += str(count) + s[i]
            i += 1
        s = temp
    return s

# 6. Sum of Factorials Series
import math
def sum_of_factorials(n):
    return sum(math.factorial(i) for i in range(1, n+1))

# 7. Square Number Series
def square_series(n):
    return [i*i for i in range(1, n+1)]

# 8. Alternating Sign Series
def alternating_sign_series(n):
    return [i if i % 2 != 0 else -i for i in range(1, n+1)]

# 9. Pentabonacci Series
def pentabonacci(n):
    dp = [0]*max(5, n+1)
    dp[4] = 1
    for i in range(5, n+1):
        dp[i] = sum(dp[i-5:i])
    return dp[n]

# 10. Sum of Natural Numbers
def sum_natural(n):
    return n*(n+1)//2

# 11. Cube Series
def cube_series(n):
    return [i**3 for i in range(1, n+1)]

# 12. Geometric Series
def geometric_series(a, r, n):
    return [a * r**i for i in range(n)]

# 13. N-th Digit of Concatenated Numbers
def nth_digit_concat(n):
    s = ""
    i = 1
    while len(s) < n:
        s += str(i)
        i += 1
    return s[n-1]

# 14. Catalan Number (nth)
def catalan_number(n):
    res = 1
    for i in range(n):
        res = res * 2 * (2 * i + 1) // (i + 2)
    return res

# 15. Custom Recursive Series: S(n) = 2*S(n-1) + 3*S(n-2)
def custom_series(n):
    if n == 0: return 0
    if n == 1: return 1
    return 2 * custom_series(n-1) + 3 * custom_series(n-2)
